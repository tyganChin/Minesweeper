/* 
 * makeBox
 * purpose: Create a rectangle given window data and scalers
 * arguments: A scaler struct used to create the rectangle and a windowInfo 
 *            struct containing the renderwindow dimentions and location
 * returns: A rectangle
 */
RectangleShape makeBox(RectangleScaler rectangle, windowInfo window)
{
    /* calculate dimensions and location */
    int width = window.width / rectangle.wScale;
    int height = window.height / rectangle.hScale;
    float xPos = window.width / rectangle.xScale;
    float yPos = window.height / rectangle.yScale;
    Color color = rectangle.color;

    /* return initialized rectangle */
    return createRec(width, height, xPos, yPos, color);
}

/* 
 * makeText
 * purpose: Create and center a text box using the given scalers and rectangle
 * arguments: A text scaling struct and a rectangle
 * returns: A text object
 */
Text makeText(TextScaler &tInfo, RectangleShape &box)
{
    /* create text */
    Text text = createText(tInfo.text, tInfo.font, tInfo.fontSize, tInfo.fill, tInfo.thickness, tInfo.outline);

    /* center it */
    centerText(text, box);

    /* return centered text */
    return text;
}

/*
 * createRec
 * Purpose: Initializes and returns a rectangle object using the given data
 * Parameters: The dimenions, position, and color of the rectangle
 * Returns: A rectangle object
 */
RectangleShape createRec(int width, int height, float x, float y, Color color)
{
    /* create rectangle */
    RectangleShape rectangle(Vector2f(width, height));
    rectangle.setPosition(x, y);
    rectangle.setFillColor(color);

    /* return new rectangle */
    return rectangle;
}



/*
 * createText
 * Purpose: Create a text object with the given text data
 * Parameters: The text, font, size of the text, color, outline thickness and 
 *             outline color
 * Returns: A Text object
 */
Text createText(string input, string font, int size, Color fill, float thickness, Color outline)
{
    /* load in font */
    Font textFont;
    textFont.loadFromFile(font);

    /* create text object */
    Text text(input, textFont, size);
    text.setFillColor(fill);
    text.setOutlineThickness(thickness);
    text.setOutlineColor(outline);

    /* return text */
    return text;
}

static const rectangleInfo FLAG_TITLE_BOX = {WIDTH / 5.333, TITLE_HEIGHT, WIDTH / 1.231, 0, TRANSPARENT};

    int wid =  flagBox.getSize().x / 2.1739;
    int height = flagBox.getSize().y / 3.808;
    float xPos = flagBox.getPosition().x + flagBox.getSize().x / 3.704;
    float yPos = flagBox.getPosition().x + flagBox.getSize().y / 2.712;